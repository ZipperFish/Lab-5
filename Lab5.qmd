---
title: "Lab 5: Working with Text and Strings "
format: html
author: Nana Frimpong
editor: source
---

# Overview

In this lab you will practice perform a series of exercises that use text and string manipulation to either analyze data with text, manipulate data containing strings, apply regular expressions, or handle data files with unusual formats or text strings.

```{r}#
install.packages("stringr")
```

```{r}
library(stringr)
```

```{r}
library(tidyverse)
```

```{r}
library(dplyr)
```

```{r}#
install.packages("fivethirtyeight")
```

```{r}
library(fivethirtyeight)
```
## Problems

**Problem 1.** Using the 173 majors listed in fivethirtyeight.com’s [College Majors dataset](https://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/), provide code that identifies the majors that contain either "DATA" or "STATISTICS", case insensitive. You can find this dataset on R by installing the package `fivethirtyeight` and using the `major` column in either `college_recent_grades`, `college_new_grads`, or `college_all_ages`.

```{r}
data("college_recent_grads")
```


```{r}
data <-("college_recent_grads")
```


```{r}
majors_data <- college_recent_grads%>%
  filter(str_detect(str_to_upper(major), "DATA|STATISTICS"))
```

```{r}
print(majors_data)
```


**Problem 2** Write code that transforms the data below:

`[1] "bell pepper" "bilberry" "blackberry" "blood orange"`\
`[5] "blueberry" "cantaloupe" "chili pepper" "cloudberry"`\
`[9] "elderberry" "lime" "lychee" "mulberry"`\
`[13] "olive"  "salal berry"`\

Into a format like this:

`c("bell pepper", "bilberry", "blackberry", "blood orange", "blueberry", "cantaloupe", "chili pepper", "cloudberry", "elderberry", "lime", "lychee", "mulberry", "olive", "salal berry")`

As your starting point take the string defined in the following code chunk:

```{r}
messyString = ' [1] "bell pepper" "bilberry" "blackberry" "blood orange" \n
 [5] "blueberry" "cantaloupe" "chili pepper" "cloudberry" \n
 [9] "elderberry" "lime" "lychee" "mulberry" \n
 [13] "olive"  "salal berry" '
```

Hint: There are many different ways to solve this problem, but if you use `str_extract_all` a helpful flag that returns a character vector instead of a list is `simplify=TRUE`. Then you can apply other tools from `stringr` if needed.

```{r}
str_extract_all(messyString, '"[^"]+"', simplify = TRUE) |>
   str_remove_all("\n") |>
  str_replace_all('"', "") |>
  str_flatten(',')
  
```


**Problem 3** Describe, in words, what these regular expressions will match. Read carefully to see if each entry is a regular expression or a string that defines a regular expression.

-   `^.*$` 
This expression will help me get to match any sting or an empty string

-   `"\\{.+\\}"`
This expressiom will match characters into the curly brackets and the ".+" will show to match a single or more sequence of characters.
-   `\d{4}-\d{2}-\d{2}`
This expression can be used for a date format becuase the it will match four digits, two digits to too year-month and day

-   `"\\\\{4}"`
This expression will match into four curly brackets
-   `"(..)\\1"`

This expression will show  two pairs of characthers or numbers



**Problem 4.** Construct regular expressions to match words that:

-   Start with “y”.
-   Have seven letters or more.
-   Contain a vowel-consonant pair
-   Contain at least two vowel-consonant pairs in a row.
-   Contain the same vowel-consonant pair repeated twice in a row.

For each example, verify that they work by running them on the `stringr::words` dataset and show the first 10 results (hint: combine `str_detect` and logical subsetting).


```{r}
data("words")
```

```{r}
view(words)
```

```{r}
str_view(words, "^y") %>% 
  head(10)
```

```{r}
str_view(words, "^.{7,}$") %>% 
  head(10)
```

```{r}
str_view(words, "[aeiou]x[bcdfghjklmnpqrstvwxyz]" )
```

```{r}
str_view(words, "[aeiou]x[bcdfghjklmnpqrstvwxyz]" ) %>% head(10)
```


```{r}
str_view(words, "[aeiou]x[bcdfghjklmnpqrstvwxyz]{2,}" ) %>% 
  head(10)
```



```{r}
str_view(words, "[aeiou]x[bcdfghjklmnpqrstvwxyz]+") %>% head(10)
```
**Problem 5** Consider the `gss_cat` data-frame discussed in Chapter 16 of R4DS (provided as part of the `forcats` package):

-   Create a new variable that describes whether the party-id of a survey respondent is "strong" if they are a strong republican or strong democrat, "weak" if they are a not strong democrat, not strong republican, or independent of any type, and "other" for the rest.

```{r}
library(forcats)
```

```{r}
data("gss_cat")
```

```{r}
view(gss_cat)
```

```{r}
levels(gss_cat$partyid)
```

```{r}
gss_cat <- gss_cat %>% 
  mutate(strength = case_when(
    partyid %in% c("Strong republican", "Strong democrat") ~ "strong",
    partyid %in% c("Not str republican", "Not str democrat") ~ "weak",
    partyid %in% c("Ind,near rep", "Ind, near dem", "Indepdent") ~ "independent", 
    TRUE ~ "other"
  ))
```

-   Calculate the mean hours of TV watched by each of the groups "strong", "weak", and "other" and display it with a dot-plot (geom_point). Sort the levels in the dot-plot so that the group appears in order of most mean TV hours watched.

```{r}
tv_time <- gss_cat %>% 
  group_by(strength) %>% 
  summarise(tvhours = mean(tvhours, na.rm = TRUE),
    n = n())
```

```{r}
tv_time <- tv_time %>% 
  mutate( strength = fct_reorder(strength,tvhours))
```

```{r}
ggplot(tv_time, mapping = aes(x = strength, y = tvhours)) + geom_point( size = 2)
```



